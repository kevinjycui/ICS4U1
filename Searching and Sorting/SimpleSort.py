## Sorting algorithm profiles (execution times in s)
##               |  Bubble Sort  |  Selection Sort  |  Insertion Sort
## -------------------------------------------------------------------
##  Sorted 10    |  0.000        |  0.000           |  0.000
## -------------------------------------------------------------------
##  Sorted 100   |  0.001        |  0.001           |  0.000
## -------------------------------------------------------------------
##  Sorted 1000  |  0.073        |  0.060           |  0.001
## -------------------------------------------------------------------
##  Sorted 10000 |  7.578        |  5.652           |  0.010
## -------------------------------------------------------------------
## -------------------------------------------------------------------
##  Random 10    |  0.000        |  0.000           |  0.000
## -------------------------------------------------------------------
##  Random 100   |  0.003        |  0.001           |  0.002
## -------------------------------------------------------------------
##  Random 1000  |  0.228        |  0.055           |  0.219
## -------------------------------------------------------------------
##  Random 10000 |  23.323       |  5.960           |  23.867
## -------------------------------------------------------------------
## -------------------------------------------------------------------
##  Reverse 10   |  0.000        |  0.000           |  0.000
## -------------------------------------------------------------------
##  Reverse 100  |  0.003        |  0.001           |  0.004
## -------------------------------------------------------------------
##  Reverse 1000 |  0.354        |  0.059           |  0.375
## -------------------------------------------------------------------
##  Reverse 10000|  37.636       |  5.802           |  41.807
## -------------------------------------------------------------------

import cProfile
import random

def swap(lst, a, b):
    t = lst[a]
    lst[a] = lst[b]
    lst[b] = t


def bubble_sort(lst):

    size = len(lst)

    while size > 1:
        for i in range(0, size-1):
            if lst[i] > lst[i+1]:
                swap(lst, i, i+1)
        size -= 1


def selection_sort(lst):

    i = 0

    while i < len(lst):
        smallest = i
        for j in range(i, len(lst)):
            if lst[smallest] > lst[j]:
                smallest = j

        swap(lst, smallest, i)
        i += 1


def insertion_sort(lst):
    i = 0
    while i < len(lst):
        j = i
        while j > 0 and lst[j-1] > lst[j]:
            swap(lst, j, j-1)
            j -= 1
        i += 1


if __name__ == '__main__':

    fnct = input() + '(lst)'

    for size in [10, 100, 1000, 10000]:
        lst = list(range(size))  # the input data is sorted
        cProfile.run(fnct)

    print("--------------------------------------------")

    for size in [10, 100, 1000, 10000]:
        lst = list(range(size))
        random.shuffle(lst)  # the input data is in random order
        cProfile.run(fnct)

    print("--------------------------------------------")

    for size in [10, 100, 1000, 10000]:
        lst = list(range(size))
        lst.reverse()  # the input data is in reverse order (worst case)
        cProfile.run(fnct)
